generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Declaration {
  id                           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime? @map("updated_at") @db.Timestamptz(6)
  declarationType              String    @map("declaration_type") @db.VarChar(60)
  job                          String?   @db.VarChar(255)
  date                         String    @db.VarChar(30)
  hour                         String    @db.VarChar(60)
  town                         String    @db.VarChar(255)
  location_deprecated          String?   @db.VarChar(255)
  other_location_deprecated    String?   @db.VarChar(255)
  factTypes                    Json?     @map("fact_types")
  fpGroups                     Json?     @map("fp_groups")
  fpSpokenViolences            Json?     @map("fp_spoken_violences")
  fpPhysicalViolences          Json?     @map("fp_physical_violences")
  fpPhysicalViolencesPrecision String?   @map("fp_physical_violences_precision") @db.VarChar(255)
  fpSexualViolences            Json?     @map("fp_sexual_violences")
  fpPsychologicalViolences     Json?     @map("fp_psychological_violences")
  fpDiscriminations            Json?     @map("fp_discriminations")
  fpNoRespects                 Json?     @map("fp_no_respects")
  fpOthers                     Json?     @map("fp_others")
  fgGroups                     Json?     @map("fg_groups")
  fgDeteriorations             Json?     @map("fg_deteriorations")
  fgStealWithoutBreakins       Json?     @map("fg_steal_without_breakins")
  fgStealWithBreakins          Json?     @map("fg_steal_with_breakins")
  fgOthers                     Json?     @map("fg_others")
  rCausePatients               Json?     @map("r_cause_patients")
  rCauseProfessionals          Json?     @map("r_cause_professionals")
  rDiscords                    Json?     @map("r_discords")
  rLifeRules                   Json?     @map("r_life_rules")
  rFalsifications              Json?     @map("r_falsifications")
  rDeficientCommunications     Json?     @map("r_deficient_communications")
  rOthers                      Json?     @map("r_others")
  rOthersPrecision             String?   @map("r_others_precision") @db.VarChar(255)
  rNotApparent                 Boolean?  @map("r_not_apparent")
  victims                      Json
  thirdParty                   Json?     @map("third_party")
  thirdPartyIsPresent          String?   @map("third_party_is_present") @db.VarChar(255)
  thirdPartyPrecision          String?   @map("third_party_precision") @db.VarChar(255)
  pursuit                      String?   @db.VarChar(255)
  pursuitPrecision             String?   @map("pursuit_precision") @db.VarChar(255)
  pursuitBy                    Json?     @map("pursuit_by")
  authors                      Json
  description                  String
  declarantContactAgreement    String    @map("declarant_contact_agreement") @db.VarChar(30)
  declarantNames               String?   @map("declarant_names") @db.VarChar(255)
  declarantExternalId          String?   @map("declarant_external_id") @db.VarChar(255)
  declarantEmail               String?   @map("declarant_email") @db.VarChar(255)
  declarantTel                 String?   @map("declarant_tel") @db.VarChar(30)
  etsId                        String?   @map("ets_id") @db.Uuid
  etsStatus                    String?   @map("ets_status") @db.VarChar(30)
  etsDeclaredBy                String?   @map("ets_declared_by") @db.Uuid
  etsModeratedBy               String?   @map("ets_moderated_by") @db.Uuid
  locationMain                 String?   @map("ets_location1") @db.VarChar(255)
  locationSecondary            String?   @map("ets_location2") @db.VarChar(255)
  postalCode                   String    @map("postal_code") @db.VarChar(5)
  location                     Json

  @@map("declarations")
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  firstName String?   @map("first_name") @db.VarChar(255)
  lastName  String?   @map("last_name") @db.VarChar(255)
  email     String    @db.VarChar(128)
  password  String?   @db.VarChar(128)
  role      String    @db.VarChar(128)
  scope     Json?

  @@unique([email, deletedAt], name: "users_email_deleted_at_unique")
  @@map("users")
}

model Ets {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @map("updated_at") @db.Timestamptz(6)
  finesset      String    @unique @db.VarChar(255)
  finessej      String?   @db.VarChar(255)
  rs            String    @db.VarChar(255)
  town          String    @db.VarChar(255)
  department    String    @db.VarChar(3)
  juridicStatus String    @map("juridic_status") @db.VarChar(255)

  @@map("ets")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)

  @@ignore
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model reports_history {
  sent_at DateTime? @db.Timestamptz(6)
  sent_to String?   @db.VarChar(255)

  @@ignore
}
