generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Declaration {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                 DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime? @map("updated_at") @db.Timestamptz(6)
  declarationType           String    @map("declaration_type") @db.VarChar(60)
  job                       String?   @db.VarChar(255)
  date                      String    @db.VarChar(30)
  hour                      String    @db.VarChar(60)
  town                      String    @db.VarChar(255)
  description               String
  declarantNames            String?   @map("declarant_names") @db.VarChar(255)
  declarantExternalId       String?   @map("declarant_external_id") @db.VarChar(255)
  declarantEmail            String?   @map("declarant_email") @db.VarChar(255)
  declarantTel              String?   @map("declarant_tel") @db.VarChar(30)
  postalCode                String    @map("postal_code") @db.VarChar(5)
  location                  Json
  declarantContactAgreement Boolean?  @map("declarant_contact_agreement")
  thirdParty                Json?     @map("third_party")
  pursuit                   Json?
  victims                   Json
  authors                   Json
  finesset                  String?   @db.VarChar(255)
  factPersons               Json?     @map("fact_persons")
  factGoods                 Json?     @map("fact_goods")
  reasons                   Json?
  reasonNotApparent         Boolean   @default(false) @map("reason_not_apparent")
  editorId                  String?   @map("editor_id") @db.Uuid
  editor                    Editor?   @relation("declarationsToeditors", fields: [editorId], references: [id])

  @@map("declarations")
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  firstName String?   @map("first_name") @db.VarChar(255)
  lastName  String?   @map("last_name") @db.VarChar(255)
  email     String    @db.VarChar(128)
  password  String?   @db.VarChar(128)
  role      String    @db.VarChar(128)
  scope     Json?

  @@unique([email, deletedAt], name: "users_email_deleted_at_unique")
  @@map("users")
}

model Ets {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @map("updated_at") @db.Timestamptz(6)
  finesset      String    @unique @db.VarChar(255)
  finessej      String?   @db.VarChar(255)
  rs            String    @db.VarChar(255)
  town          String    @db.VarChar(255)
  department    String    @db.VarChar(3)
  juridicStatus String    @map("juridic_status") @db.VarChar(255)

  @@map("ets")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)

  @@ignore
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model reports_history {
  sent_at DateTime? @db.Timestamptz(6)
  sent_to String?   @db.VarChar(255)

  @@ignore
}

model Editor {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?     @map("updated_at") @db.Timestamptz(6)
  name         String?       @db.VarChar(255)
  declarations Declaration[] @relation("declarationsToeditors")
  tokens       Token[]       @relation("editorsTotokens")

  @@map("editors")
}

model Token {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)
  editorId  String?   @map("editor_id") @db.Uuid
  editor    Editor?   @relation("editorsTotokens", fields: [editorId], references: [id])

  @@map("tokens")
}
